from CFG.ConfigHandler import config as cfg
from CFG.UICfg import commands as cmds
from utils import render_template

from returns.result import Success
from aiogram import types, F, Router
from aiogram.filters import Command
from database.db_requests import DatabaseManager
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup



router = Router()

admin_ids = {1236245459}    

@router.message(F.text, Command(cmds["admin_cmd"][0]))
async def admin_cmd(message: types.Message):
    pass  # TODO

@router.message(F.text, Command(cmds["validate_cmd"][0]))
async def validate_cmd(message: types.Message, db: DatabaseManager):
    user_id = message.from_user.id
    if user_id not in admin_ids:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")
        return
    
    groups = await db.get_unvalidated_groups()
    for g in groups:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"validate:accept:{g.name}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"validate:reject:{g.name}")
            ]
        ])

        await message.answer(
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {g.name}\n"
            f"–°—Å—ã–ª–∫–∞: {g.link}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {g.category.name}\n"
            f"{'üîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è' if g.is_private else '–ü—É–±–ª–∏—á–Ω–∞—è'}\n",
            reply_markup=keyboard
        )

@router.callback_query(F.data)
async def handle_validation(callback_query: types.CallbackQuery, db: DatabaseManager):
    data = callback_query.data.split("validate:")[1]
    ans = data.split(":")[0]

    if ans == "accept":
        group_name = data.split(":")[1]
        group_id = await db.get_group_id_by_name(group_name)
        if isinstance(group_id, Success):
            await db.update_group_set_validate_status(group_id.unwrap())
            await callback_query.message.answer("–ì—Ä—É–ø–ø–∞ –ø—Ä–∏–Ω—è—Ç–∞")
    else:
        group_name = data.split(":")[1]
        res = await db.delete_group(group_name, callback_query.from_user.id)
        await callback_query.message.answer(res._inner_value)
